/**
 * This command is generated by the sensor and sent within a specified period without a request from the server when configured to issue hour consumption data.
 * The command contains the total value of the pulse counter for the specified hour and hourly difference, which is limited to 31-bit size.
 *
 * @packageDocumentation
 *
 * @example create command instance from command body hex dump
 * ```js
 * import * as hourMcEx from 'jooby-codec/analog/commands/uplink/hourMcEx.js';
 *
 * // 1 channel at 2023.12.23 12:00:00 GMT
 * const bytes = [0x2f, 0x97, 0x0c, 0x07, 0x01, 0x83, 0x01, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a];
 *
 * // decoded payload
 * const parameters = hourMcEx.fromBytes(bytes);
 *
 * console.log(parameters);
 * // output:
 * {
 *     startTime2000: 756648000,
 *     hour: 12,
 *     hours: 7,
 *     channelList: [
 *         {value: 131, diff: [10, 10, 10, 10, 10, 10, 10], index: 1}
 *     ]
 * }
 * ```
 *
 * [Command format documentation](https://github.com/jooby-dev/jooby-docs/blob/main/docs/analog/commands/uplink/HourMCEx.md)
 */

import * as types from '../../../types.js';
import * as command from '../../utils/command.js';
import CommandBinaryBuffer, {IChannelValuesWithHourDiffExtended, ICommandBinaryBuffer} from '../../utils/CommandBinaryBuffer.js';


export const id: types.TCommandId = 0x311f;
export const name: types.TCommandName = 'hourMcEx';
export const headerSize = 3;

// date 2 bytes, hour 2 byte, channelList - 1 byte, so max channelList = 5
// max hours diff - 7 (3 bit value)
// 5 + (4 channelList * 5 bytes of hour values) + (4 * 5 bytes of diff * 255 max hours diff)
const COMMAND_BODY_MAX_SIZE = 5125;

export const examples: command.TCommandExamples = {
    '1 channel at 2023.12.23 12:00:00 GMT': {
        id,
        name,
        headerSize,
        parameters: {
            startTime2000: 756648000,
            hour: 12,
            hours: 7,
            channelList: [
                {value: 131, diff: [10, 10, 10, 10, 10, 10, 10], index: 1}
            ]
        },
        bytes: [
            0x1f, 0x31, 0x0e,
            0x2f, 0x97, 0x0c, 0x07, 0x01, 0x83, 0x01, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a
        ]
    }
};


/**
 * Decode command parameters.
 *
 * @param data - only body (without header)
 * @returns command payload
 */
export const fromBytes = ( data: types.TBytes ): IChannelValuesWithHourDiffExtended => {
    if ( data.length > COMMAND_BODY_MAX_SIZE ) {
        throw new Error(`Wrong buffer size: ${data.length}.`);
    }

    const buffer: ICommandBinaryBuffer = new CommandBinaryBuffer(data);

    return buffer.getChannelsValuesWithHourDiffExtended();
};


/**
 * Encode command parameters.
 *
 * @param parameters - command payload
 * @returns full message (header with body)
 */
export const toBytes = ( parameters: IChannelValuesWithHourDiffExtended ): types.TBytes => {
    const buffer: ICommandBinaryBuffer = new CommandBinaryBuffer(COMMAND_BODY_MAX_SIZE);

    buffer.setChannelsValuesWithHourDiffExtended(parameters);

    return command.toBytes(id, buffer.getBytesToOffset());
};
