/**
 * This command is generated by the sensor and sent periodically without any request from the server when it is configured to provide hourly consumption data.
 * The command contains the complete pulse counter value for the specified hour and the hourly difference in readings, limited to 13 bits.
 *
 * For hardware revisions 1, 2.
 *
 * @packageDocumentation
 *
 * @example create command instance from command body hex dump
 * ```js
 * import * as hour from 'jooby-codec/analog/commands/uplink/hour.js';
 *
 * // 1 hour from 2023.12.23 12:00:00 GMT
 * const bytes = [0x2f, 0x97, 0x8c, 0x00, 0x00, 0xa3, 0x80, 0x0a];
 *
 * // decoded payload
 * const parameters = hour.fromBytes(bytes);
 *
 * console.log(parameters);
 * // output:
 * {
 *     startTime2000: 756648000,
 *     counter: {isMagneticInfluence: true, value: 163},
 *     diff: [
 *         {isMagneticInfluence: true, value: 10}
 *     ]
 * }
 * ```
 *
 * [Command format documentation](https://github.com/jooby-dev/jooby-docs/blob/main/docs/analog/commands/uplink/Hour.md)
 */

import * as types from '../../../types.js';
import * as command from '../../utils/command.js';
import CommandBinaryBuffer, {ILegacyHourCounterWithDiff, ICommandBinaryBuffer} from '../../utils/CommandBinaryBuffer.js';


export const id: types.TCommandId = 0x40;
export const name: types.TCommandName = 'hour';
export const headerSize = 1;

export const examples: command.TCommandExamples = {
    '1 hour from 2023.12.23 12:00:00 GMT': {
        id,
        name,
        headerSize,
        parameters: {
            startTime2000: 756648000,
            counter: {isMagneticInfluence: true, value: 163},
            diff: [
                {isMagneticInfluence: true, value: 10}
            ]
        },
        bytes: [
            0x48,
            0x2f, 0x97, 0x8c, 0x00, 0x00, 0xa3, 0x80, 0x0a
        ]
    }
};


/**
 * Decode command parameters.
 *
 * @param data - only body (without header)
 * @returns command payload
 */
export const fromBytes = ( data: types.TBytes ): ILegacyHourCounterWithDiff => {
    const buffer: ICommandBinaryBuffer = new CommandBinaryBuffer(data);

    //console.log('buffer.getLegacyHourCounterWithDiff():', buffer.getLegacyHourCounterWithDiff());
    return buffer.getLegacyHourCounterWithDiff();
};


/**
 * Encode command parameters.
 *
 * @param parameters - command payload
 * @returns full message (header with body)
 */
export const toBytes = ( parameters: ILegacyHourCounterWithDiff ): types.TBytes => {
    const buffer: ICommandBinaryBuffer = new CommandBinaryBuffer(CommandBinaryBuffer.getLegacyHourCounterSize(parameters));

    buffer.setLegacyHourCounterWithDiff(parameters);

    //console.log('command.toBytes(id, buffer.getBytesToOffset()):', command.toBytes(id, buffer.getBytesToOffset()));
    return command.toBytes(id, buffer.getBytesToOffset());
};
