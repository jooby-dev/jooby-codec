/**
 * This command is generated by the sensor and sent periodically without any request from the server when it is configured to provide daily consumption data.
 * The command contains complete pulse counter data for the specified day.
 *
 * For hardware revisions 1, 2.
 *
 * @packageDocumentation
 *
 * @example create command instance from command body hex dump
 * ```js
 * import * as day from 'jooby-codec/analog/commands/uplink/day.js';
 *
 * // day value for 2023.12.23 00:00:00 GMT
 * const bytes = [0x2f, 0x97, 0x80, 0x00, 0x00, 0x7a];
 *
 * // decoded payload
 * const parameters = day.fromBytes(bytes);
 *
 * console.log(parameters);
 * // output:
 * {
 *     value: 122,
 *     isMagneticInfluence: true,
 *     startTime2000: 756604800
 * }
 * ```
 *
 * [Command format documentation](https://github.com/jooby-dev/jooby-docs/blob/main/docs/analog/commands/uplink/Day.md)
 */

import * as types from '../../../types.js';
import * as command from '../../utils/command.js';
import BinaryBuffer, {IBinaryBuffer} from '../../../utils/BinaryBuffer.js';
import {
    getMagneticInfluenceBit,
    setMagneticInfluenceBit,
    getLegacyCounterValue,
    setLegacyCounterValue,
    getHours,
    setHours,
    getDate,
    setDate
} from '../../utils/CommandBinaryBuffer.js';
import {TTime2000, getDateFromTime2000, getTime2000FromDate} from '../../utils/time.js';
import {day as commandId} from '../../constants/uplinkIds.js';
import commandNames from '../../constants/uplinkNames.js';


/**
 * Day command parameters.
 */
interface IDayResponseParameters {
    /**
     * Start date for requested data.
     */
    startTime2000: TTime2000,

    /**
     * The magnetic influence flag indicates that there was a magnet intervention.
     */
    isMagneticInfluence: boolean,

    value: types.TUint24
}


export const id: types.TCommandId = commandId;
export const name: types.TCommandName = commandNames[commandId];
export const headerSize = 1;

const COMMAND_BODY_SIZE = 6;

export const examples: command.TCommandExamples = {
    'day value for 2023.12.23 00:00:00 GMT': {
        id,
        name,
        headerSize,
        parameters: {
            value: 122,
            isMagneticInfluence: true,
            startTime2000: 756604800
        },
        bytes: [
            0x26,
            0x2f, 0x97, 0x80, 0x00, 0x00, 0x7a
        ]
    }
};


/**
 * Decode command parameters.
 *
 * @param bytes - only body (without header)
 * @returns command payload
 */
export const fromBytes = ( bytes: types.TBytes ): IDayResponseParameters => {
    const buffer: IBinaryBuffer = new BinaryBuffer(bytes, false);
    const date = getDate(buffer);
    const byte = buffer.getUint8();
    const {hour} = getHours(buffer, byte);
    const isMagneticInfluence = getMagneticInfluenceBit(byte);
    const value = getLegacyCounterValue(buffer);

    date.setUTCHours(hour);

    return {value, isMagneticInfluence, startTime2000: getTime2000FromDate(date)};
};


/**
 * Encode command parameters.
 *
 * @param parameters - command payload
 * @returns full message (header with body)
 */
export const toBytes = ( parameters: IDayResponseParameters ): types.TBytes => {
    const buffer: IBinaryBuffer = new BinaryBuffer(COMMAND_BODY_SIZE, false);
    const {value, isMagneticInfluence, startTime2000} = parameters;
    const date = getDateFromTime2000(startTime2000);
    const hour = date.getUTCHours();

    setDate(buffer, date);
    // force hours to 0
    setHours(buffer, hour, 1);

    // reset byte with isMagneticInfluence bit
    buffer.seek(buffer.offset - 1);
    const byte = buffer.getUint8();
    buffer.seek(buffer.offset - 1);
    buffer.setUint8(setMagneticInfluenceBit(byte, isMagneticInfluence));
    setLegacyCounterValue(buffer, value);

    return command.toBytes(id, buffer.getBytesToOffset());
};
